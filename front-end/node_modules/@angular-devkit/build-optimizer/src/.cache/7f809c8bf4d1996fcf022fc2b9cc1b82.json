{"remainingRequest":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/skan/program/gitLab/materialDidactico/front-end/node_modules/angular-notifier/esm5/src/services/notifier-timer.service.js","dependencies":[{"path":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/angular-notifier/esm5/src/services/notifier-timer.service.js","mtime":499162500000},{"path":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1540859967560},{"path":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { Injectable } from '@angular/core';\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\nvar NotifierTimerService = /** @class */ /*@__PURE__*/ (function () {\n    function NotifierTimerService() {\n        this.now = 0;\n        this.remaining = 0;\n    }\n    /**\n     * Start (or resume) the timer\n     *\n     * @param {?} duration Timer duration, in ms\n     * @return {?} Promise, resolved once the timer finishes\n     */\n    NotifierTimerService.prototype.start = /**\n     * Start (or resume) the timer\n     *\n     * @param {?} duration Timer duration, in ms\n     * @return {?} Promise, resolved once the timer finishes\n     */\n        function (duration) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                // For the first run ...\n                // For the first run ...\n                _this.remaining = duration;\n                // Setup, then start the timer\n                // Setup, then start the timer\n                _this.finishPromiseResolver = resolve;\n                _this.continue();\n            });\n        };\n    /**\n     * Pause the timer\n     * @return {?}\n     */\n    NotifierTimerService.prototype.pause = /**\n     * Pause the timer\n     * @return {?}\n     */\n        function () {\n            clearTimeout(this.timerId);\n            this.remaining -= new Date().getTime() - this.now;\n        };\n    /**\n     * Continue the timer\n     * @return {?}\n     */\n    NotifierTimerService.prototype.continue = /**\n     * Continue the timer\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.now = new Date().getTime();\n            this.timerId = window.setTimeout(function () {\n                _this.finish();\n            }, this.remaining);\n        };\n    /**\n     * Stop the timer\n     * @return {?}\n     */\n    NotifierTimerService.prototype.stop = /**\n     * Stop the timer\n     * @return {?}\n     */\n        function () {\n            clearTimeout(this.timerId);\n            this.remaining = 0;\n        };\n    /**\n     * Finish up the timeout by resolving the timer promise\n     * @return {?}\n     */\n    NotifierTimerService.prototype.finish = /**\n     * Finish up the timeout by resolving the timer promise\n     * @return {?}\n     */\n        function () {\n            this.finishPromiseResolver();\n        };\n    return NotifierTimerService;\n}());\nexport { NotifierTimerService };\nfunction NotifierTimerService_tsickle_Closure_declarations() {\n    /**\n     * Timestamp (in ms), created in the moment the timer starts\n     * @type {?}\n     */\n    NotifierTimerService.prototype.now;\n    /**\n     * Remaining time (in ms)\n     * @type {?}\n     */\n    NotifierTimerService.prototype.remaining;\n    /**\n     * Timeout ID, used for clearing the timeout later on\n     * @type {?}\n     */\n    NotifierTimerService.prototype.timerId;\n    /**\n     * Promise resolve function, eventually getting called once the timer finishes\n     * @type {?}\n     */\n    NotifierTimerService.prototype.finishPromiseResolver;\n}\n//# sourceMappingURL=notifier-timer.service.js.map\n",null]}