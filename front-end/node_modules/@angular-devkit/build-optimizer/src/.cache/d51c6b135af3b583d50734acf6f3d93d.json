{"remainingRequest":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/skan/program/gitLab/materialDidactico/front-end/node_modules/angular-notifier/esm5/src/services/notifier.service.js","dependencies":[{"path":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/angular-notifier/esm5/src/services/notifier.service.js","mtime":499162500000},{"path":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1540859967560},{"path":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { Inject, Injectable, forwardRef } from '@angular/core';\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierQueueService } from './notifier-queue.service';\nimport { NotifierConfigToken } from './../notifier.module';\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\nvar NotifierService = /** @class */ (function () {\n    function NotifierService(notifierQueueService, config // The forwardRef is (sadly) required here\n    ) {\n        this.queueService = notifierQueueService;\n        this.config = config;\n    }\n    /**\n     * Get the notifier configuration\n     *\n     * @return {?} Notifier configuration\n     */\n    NotifierService.prototype.getConfig = /**\n     * Get the notifier configuration\n     *\n     * @return {?} Notifier configuration\n     */\n        function () {\n            return this.config;\n        };\n    /**\n     * API: Show a new notification\n     *\n     * @param {?} notificationOptions Notification options\n     * @return {?}\n     */\n    NotifierService.prototype.show = /**\n     * API: Show a new notification\n     *\n     * @param {?} notificationOptions Notification options\n     * @return {?}\n     */\n        function (notificationOptions) {\n            this.queueService.push({\n                payload: notificationOptions,\n                type: 'SHOW'\n            });\n        };\n    /**\n     * API: Hide a specific notification, given its ID\n     *\n     * @param {?} notificationId ID of the notification to hide\n     * @return {?}\n     */\n    NotifierService.prototype.hide = /**\n     * API: Hide a specific notification, given its ID\n     *\n     * @param {?} notificationId ID of the notification to hide\n     * @return {?}\n     */\n        function (notificationId) {\n            this.queueService.push({\n                payload: notificationId,\n                type: 'HIDE'\n            });\n        };\n    /**\n     * API: Hide the newest notification\n     * @return {?}\n     */\n    NotifierService.prototype.hideNewest = /**\n     * API: Hide the newest notification\n     * @return {?}\n     */\n        function () {\n            this.queueService.push({\n                type: 'HIDE_NEWEST'\n            });\n        };\n    /**\n     * API: Hide the oldest notification\n     * @return {?}\n     */\n    NotifierService.prototype.hideOldest = /**\n     * API: Hide the oldest notification\n     * @return {?}\n     */\n        function () {\n            this.queueService.push({\n                type: 'HIDE_OLDEST'\n            });\n        };\n    /**\n     * API: Hide all notifications at once\n     * @return {?}\n     */\n    NotifierService.prototype.hideAll = /**\n     * API: Hide all notifications at once\n     * @return {?}\n     */\n        function () {\n            this.queueService.push({\n                type: 'HIDE_ALL'\n            });\n        };\n    /**\n     * API: Shortcut for showing a new notification\n     *\n     * @param {?} type             Type of the notification\n     * @param {?} message          Message of the notification\n     * @param {?=} notificationId\n     * @return {?}\n     */\n    NotifierService.prototype.notify = /**\n     * API: Shortcut for showing a new notification\n     *\n     * @param {?} type             Type of the notification\n     * @param {?} message          Message of the notification\n     * @param {?=} notificationId\n     * @return {?}\n     */\n        function (type, message, notificationId) {\n            var /** @type {?} */ notificationOptions = {\n                message: message,\n                type: type\n            };\n            if (notificationId !== undefined) {\n                notificationOptions.id = notificationId;\n            }\n            this.show(notificationOptions);\n        };\n    return NotifierService;\n}());\nexport { NotifierService };\nfunction NotifierService_tsickle_Closure_declarations() {\n    /**\n     * Notifier queue service\n     * @type {?}\n     */\n    NotifierService.prototype.queueService;\n    /**\n     * Notifier configuration\n     * @type {?}\n     */\n    NotifierService.prototype.config;\n}\n//# sourceMappingURL=notifier.service.js.map\n",null]}