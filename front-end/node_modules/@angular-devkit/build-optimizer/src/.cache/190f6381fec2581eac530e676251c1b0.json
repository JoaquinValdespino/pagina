{"remainingRequest":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/skan/program/gitLab/materialDidactico/front-end/node_modules/angular-notifier/esm5/src/notifier.module.js","dependencies":[{"path":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/angular-notifier/esm5/src/notifier.module.js","mtime":499162500000},{"path":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1540859967560},{"path":"/home/skan/program/gitLab/materialDidactico/front-end/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, NgModule } from '@angular/core';\nimport { NotifierContainerComponent } from './components/notifier-container.component';\nimport { NotifierNotificationComponent } from './components/notifier-notification.component';\nimport { NotifierConfig } from './models/notifier-config.model';\nimport { NotifierAnimationService } from './services/notifier-animation.service';\nimport { NotifierQueueService } from './services/notifier-queue.service';\nimport { NotifierService } from './services/notifier.service';\n/**\n * Injection Token for notifier options\n */\nexport var /** @type {?} */ NotifierOptionsToken = new InjectionToken('[angular-notifier] Notifier Options');\n/**\n * Injection Token for notifier configuration\n */\nexport var /** @type {?} */ NotifierConfigToken = new InjectionToken('[anuglar-notifier] Notifier Config');\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param {?} options - Custom notifier options\n * @return {?} - Notifier configuration as result\n */\nexport function notifierCustomConfigFactory(options) {\n    return new NotifierConfig(options);\n}\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @return {?} - Notifier configuration as result\n */\nexport function notifierDefaultConfigFactory() {\n    return new NotifierConfig({});\n}\n/**\n * Notifier module\n */\nvar NotifierModule = /** @class */ /*@__PURE__*/ (function () {\n    function NotifierModule() {\n    }\n    /**\n     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n     *\n     * @param {?=} options\n     * @return {?} - Notifier module with custom providers\n     */\n    NotifierModule.withConfig = /**\n     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n     *\n     * @param {?=} options\n     * @return {?} - Notifier module with custom providers\n     */\n        function (options) {\n            if (options === void 0) {\n                options = {};\n            }\n            return {\n                ngModule: NotifierModule,\n                providers: [\n                    // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n                    {\n                        provide: NotifierOptionsToken,\n                        useValue: options\n                    },\n                    // Provide a custom notifier configuration, based on the given notifier options\n                    {\n                        deps: [\n                            NotifierOptionsToken\n                        ],\n                        provide: NotifierConfigToken,\n                        useFactory: notifierCustomConfigFactory\n                    }\n                ]\n            };\n        };\n    return NotifierModule;\n}());\nexport { NotifierModule };\n//# sourceMappingURL=notifier.module.js.map\n",null]}